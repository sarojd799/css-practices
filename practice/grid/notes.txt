
1.Grid works in 2 dimensions
2.In grid layout system we also have a grid container (display: grid | inline-grid)
3.All direct children of the grid container automatically become grid items.
4.Vertical lines of grid are called "grid column" and horizontal are "grid rows".
5.Gap between rows and columns are calls "grid gaps".
6.Row and column gaps can be set with (column-gap,row-gap,gap) properties.
7.The lines between columns are called "column lines" and lines between rows are "row lines"
8.
grid-template-columns:  "defines the number of columns in your grid layout"
grid-template-rows: "defines the number of rows in your grid layout"
to repeat n times use grid-template-rows: repeat(4, auto)

9.On grid layout container
justify-content: center;-> justifies all contents as whole
justify-items: start; -> default:stretch, justifies grid-item at its own position

10.grid-row | grid-column
Short hand for grid-row-start and grid-row end
grid-row: 1 / 3 -> item starts on row line 1 and ends in line 3
grid-column: 1 / 3 -> item starts on column line 1 and ends in line 3

grid-row: span 2 -> will span the grid

11.Grid area
The grid-area property can be used as a shorthand property for the 
    1.grid-row-start
    2.grid-column-start 
    3.grid-row-end
    4.grid-column-end

    The syntax is: grid-row-start / grid-column-start / grid-row-end / grid-column-end.

    .item8 {
    grid-area: 1 / 2 / 5 / 6;
    }

    The grid-area property can also be used to assign names to grid items.
    Named grid items can be referred to by the grid-template-areas property of the grid container.
    Each row is defined by single quotes (' ')
    The columns in each row is defined inside the single quotes, separated by a space.
    A period sign represents a grid item with no name.

    .item1 {
        grid-area: myArea;
    }
    .grid-container {
        grid-template-areas: 'myArea myArea myArea myArea myArea';
    }